apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.0'
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors

    productFlavors.each {

        productFlavorName ->
//iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    //sourceName — e.g. freeDebug ,sourcePath — e.g. free/debug
                    def sourceName
                    if (!productFlavorName) {
                        sourceName  = "${buildTypeName}"
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                    }
                    // testTaskName —  e.g. testFreeDebugtest task that the coverage task depends on,
                    def testTaskName = "test${sourceName.capitalize()}UnitTest"
                    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {

                        group = "Reporting"
                        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                        def include = [
                                '**/*ViewModel.*',
                                '**/*DataSource.**'
                        ]
                        def exclude = [
                                '**/*Dummy*.*',
                                '**/*LocalDataSource.**'
                        ]
                        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/$productFlavorName/$buildTypeName", excludes: exclude, includes: include)
                        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/$sourceName", excludes: exclude, includes: include)

                        classDirectories.from = files([debugTree], [kotlinDebugTree])
                        def coverageSourceDirs = [
                                "src/main/java",
                                "src/$productFlavorName/java",
                                "src/$buildTypeName/java"
                        ]
                        additionalSourceDirs.from = files(coverageSourceDirs)
                        sourceDirectories.from = files(coverageSourceDirs)
                        executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                        reports {
                            xml.enabled = true
                            html.enabled = true
                        }
                    }
            }
    }
}
